import { createPublicClient, createWalletClient, http, parseEther } from 'npm:viem'
import { base, baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// AgentTokenFactory contract bytecode and ABI
const FACTORY_BYTECODE = "0x608060405234801561001057600080fd5b506040516200158338038062001583833981810160405281019061003491906100b7565b8160008190555080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050610117565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006100b48261008b565b9050919050565b6100c4816100a9565b81146100cf57600080fd5b50565b6000815190506100e1816100bb565b92915050565b600080604083850312156100fe576100fd610086565b5b600061010c858286016100d2565b925050602061011d858286016100d2565b9150509250929050565b61145c80620001276000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c80637d55094d116100665780637d55094d146101145780638da5cb5b14610132578063c4d66de814610150578063d0def5211461016c578063f851a4401461018857600080fd5b8063013cf08b1461009857806313af4035146100c857806339ebf823146100e4578063584b153e14610100575b600080fd5b6100b260048036038101906100ad9190610b8e565b6101a6565b6040516100bf9190610bcd565b60405180910390f35b6100e260048036038101906100dd9190610c14565b6101da565b005b6100fe60048036038101906100f99190610c41565b610297565b005b61011a60048036038101906101159190610c94565b6103aa565b6040516101279190610d00565b60405180910390f35b61013c610492565b6040516101499190610d2a565b60405180910390f35b61016a60048036038101906101659190610c41565b6104b8565b005b61018660048036038101906101819190610d45565b610575565b005b610190610632565b60405161019d9190610d2a565b60405180910390f35b600381815481106101b657600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6101e2610658565b73ffffffffffffffffffffffffffffffffffffffff16610200610632565b73ffffffffffffffffffffffffffffffffffffffff1614610256576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161024d90610dcc565b60405180910390fd5b80600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61029f610658565b73ffffffffffffffffffffffffffffffffffffffff166102bd610632565b73ffffffffffffffffffffffffffffffffffffffff1614610313576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161030a90610dcc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b60006103b4610658565b73ffffffffffffffffffffffffffffffffffffffff166103d2610632565b73ffffffffffffffffffffffffffffffffffffffff1614610428576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161041f90610dcc565b60405180910390fd5b600080549050610437846103aa565b600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1684848460405161046990610e23565b610076949392919061110c565b604051809103906000f08015801561048a573d6000803e3d6000fd5b509050929050565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6104c0610658565b73ffffffffffffffffffffffffffffffffffffffff166104de610632565b73ffffffffffffffffffffffffffffffffffffffff1614610534576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161052b90610dcc565b60405180910390fd5b80600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b61057d610658565b73ffffffffffffffffffffffffffffffffffffffff1661059b610632565b73ffffffffffffffffffffffffffffffffffffffff16146105f1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016105e890610dcc565b60405180910390fd5b806000819055507f6bd5c950a8d8df17f772f5af37cb3655737899cbf903264b9795592da439661c6000546040516106279190610d00565b60405180910390a150565b600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b600033905090565b600080fd5b6000819050919050565b61067d81610665565b811461068857600080fd5b50565b60008135905061069a81610674565b92915050565b6000602082840312156106b6576106b5610660565b5b60006106c48482850161068b565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006106f8826106cd565b9050919050565b610708816106ed565b82525050565b600060208201905061072360008301846106ff565b92915050565b610732816106ed565b811461073d57600080fd5b50565b60008135905061074f81610729565b92915050565b60006020828403121561076b5761076a610660565b5b600061077984828501610740565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083601f8401126107a7576107a6610782565b5b8235905067ffffffffffffffff8111156107c4576107c3610787565b5b6020830191508360018202830111156107e0576107df61078c565b5b9250929050565b600080602083850312156107fe576107fd610660565b5b600083013567ffffffffffffffff81111561081c5761081b610665565b5b61082885828601610791565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610869816106ed565b82525050565b600061087b8383610860565b60208301905092915050565b6000602082019050919050565b600061089f82610834565b6108a9818561083f565b93506108b483610850565b8060005b838110156108e55781516108cc888261086f565b97506108d783610887565b9250506001810190506108b8565b5085935050505092915050565b6000602082019050818103600083015261090c8184610894565b905092915050565b61091d81610665565b82525050565b60006020820190506109386000830184610914565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61097582611018565b810181811067ffffffffffffffff8211171561099457610993610943565b5b80604052505050565b60006109a7610932565b90506109b3828261096c565b919050565b600067ffffffffffffffff8211156109d3576109d2610943565b5b6109dc82611018565b9050602081019050919050565b82818337600083830152505050565b6000610a0b610a06846109b8565b61099d565b905082815260208101848484011115610a2757610a2661093e565b5b610a328482856109e9565b509392505050565b600082601f830112610a4f57610a4e610782565b5b8135610a5f8482602086016109f8565b91505092915050565b600080600060608486031215610a8157610a80610660565b5b600084013567ffffffffffffffff811115610a9f57610a9e610665565b5b610aab86828701610a3a565b935050602084013567ffffffffffffffff811115610acc57610acb610665565b5b610ad886828701610a3a565b925050604084013567ffffffffffffffff811115610af957610af8610665565b5b610b0586828701610a3a565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610b5657607f821691505b602082108103610b6957610b68610b0f565b5b50919050565b610b7881610665565b8114610b8357600080fd5b50565b600081359050610b9581610b6f565b92915050565b600060208284031215610bb157610bb0610660565b5b6000610bbf84828501610b86565b91505092915050565b6000602082019050610bdd6000830184610914565b92915050565b600067ffffffffffffffff821115610bfe57610bfd610943565b5b610c0782611018565b9050602081019050919050565b600060208284031215610c2a57610c29610660565b5b6000610c3884828501610740565b91505092915050565b600060208284031215610c5757610c56610660565b5b600082013567ffffffffffffffff811115610c7557610c74610665565b5b610c8184828501610a3a565b91505092915050565b600080600060608486031215610ca357610ca2610660565b5b600084013567ffffffffffffffff811115610cc157610cc0610665565b5b610ccd86828701610a3a565b935050602084013567ffffffffffffffff811115610cee57610ced610665565b5b610cfa86828701610a3a565b925050604084013567ffffffffffffffff811115610d1b57610d1a610665565b5b610d2786828701610a3a565b9150509250925092565b6000602082019050610d4660008301846106ff565b92915050565b600060208284031215610d6257610d61610660565b5b6000610d7084828501610b86565b91505092915050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b6000610daf602083610834565b9150610dba82610d79565b602082019050919050565b60006020820190508181036000830152610dde81610da2565b9050919050565b600081905092915050565b50565b6000610e00600083610de5565b9150610e0b82610df0565b600082019050919050565b6000610e2182610df3565b9150819050919050565b600060208201905081810360008301526020820190506000815260208101905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600082825260208201905092915050565b6000610e9e82610e4c565b610ea88185610e57565b9350610eb383610e68565b8060005b83811015610ee4578151610ecb8882610860565b9750610ed683610e78565b925050600181019050610eb7565b5085935050505092915050565b60006020820190508181036000830152610f0b8184610e93565b905092915050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b610f4881610665565b82525050565b6000610f5a8383610f3f565b60208301905092915050565b6000602082019050919050565b6000610f7e82610f13565b610f888185610f1e565b9350610f9383610f2f565b8060005b83811015610fc4578151610fab8882610f4e565b9750610fb683610f66565b925050600181019050610f97565b5085935050505092915050565b60006020820190508181036000830152610feb8184610f73565b905092915050565b6000819050919050565b6000819050919050565b600061102261101d61101884610ff3565b610ffd565b610665565b9050919050565b61103281611007565b82525050565b600060208201905061104d6000830184611029565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061108e82610665565b915061109983610665565b92508282019050808211156110b1576110b0611053565b5b92915050565b60006110c28261083f565b9150819050919050565b600081905092915050565b60006110e2826110b7565b6110ec81856110cc565b93506110fc818560208601610e68565b80840191505092915050565b6000611114828761083f565b9150611120828661083f565b915061112c828561083f565b915061113882846110d7565b91508190509594505050505056fe"

const FACTORY_ABI = [
  {
    "inputs": [
      {"name": "_promptToken", "type": "address"},
      {"name": "_treasury", "type": "address"}
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [
      {"name": "name", "type": "string"},
      {"name": "symbol", "type": "string"},
      {"name": "agentId", "type": "string"}
    ],
    "name": "createAgentToken",
    "outputs": [{"name": "", "type": "address"}],
    "stateMutability": "payable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getAllTokens",
    "outputs": [{"name": "", "type": "address[]"}],
    "stateMutability": "view",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    const { promptTokenAddress, treasuryAddress } = await req.json()

    // Get private key from environment
    const privateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY')
    if (!privateKey) {
      throw new Error('DEPLOYER_PRIVATE_KEY not configured')
    }

    // Create account and clients
    const account = privateKeyToAccount(privateKey as `0x${string}`)
    const chain = baseSepolia // Use testnet for now
    
    const publicClient = createPublicClient({
      chain,
      transport: http('https://sepolia.base.org')
    })

    const walletClient = createWalletClient({
      account,
      chain,
      transport: http('https://sepolia.base.org')
    })

    console.log('Deploying AgentTokenFactory contract...')
    console.log('Deployer address:', account.address)
    console.log('Prompt token address:', promptTokenAddress)
    console.log('Treasury address:', treasuryAddress)

    // Deploy the contract
    const hash = await walletClient.deployContract({
      abi: FACTORY_ABI,
      bytecode: FACTORY_BYTECODE,
      args: [promptTokenAddress, treasuryAddress],
      gas: 3000000n
    })

    console.log('Deploy transaction hash:', hash)

    // Wait for transaction receipt
    const receipt = await publicClient.waitForTransactionReceipt({ hash })
    console.log('Contract deployed at address:', receipt.contractAddress)

    if (!receipt.contractAddress) {
      throw new Error('Contract deployment failed - no address returned')
    }

    return new Response(
      JSON.stringify({
        success: true,
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        blockNumber: receipt.blockNumber.toString(),
        gasUsed: receipt.gasUsed.toString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200
      }
    )

  } catch (error) {
    console.error('Contract deployment error:', error)
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500
      }
    )
  }
})