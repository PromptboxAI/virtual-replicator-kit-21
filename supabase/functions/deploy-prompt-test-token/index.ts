import { createPublicClient, createWalletClient, http } from 'npm:viem'
import { baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// PromptTestToken contract - Using corrected bytecode
const PROMPT_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b50336040518060400160405280601181526020017f50726f6d7074205465737420546f6b656e0000000000000000000000000000008152506040518060400160405280600a81526020017f50524f4d505454455354000000000000000000000000000000000000000000008152508160039081610090919061028c565b50806004908161009f919061028c565b5050506100c4336b033b2e3c9fd0803ce80000006100c960201b60201c565b610435565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff160361013b5760006040517fec442f0500000000000000000000000000000000000000000000000000000000815260040161013291906103d6565b60405180910390fd5b61014d6000838361015160201b60201c565b5050565b505050565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806101ca57607f821691505b6020821081036101dd576101dc610183565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b6000600883026102457fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610208565b61024f8683610208565b95508019841693508086168417925050509392505050565b6000819050919050565b6000819050919050565b600061029661029161028c84610267565b610271565b610267565b9050919050565b6000819050919050565b6102b08361027b565b6102c46102bc8261029d565b848454610215565b825550505050565b600090565b6102d96102cc565b6102e48184846102a7565b505050565b5b81811015610308576102fd6000826102d1565b6001810190506102ea565b5050565b601f82111561034d5761031e816101e3565b610327846101f8565b81016020851015610336578190505b61034a610342856101f8565b8301826102e9565b50505b505050565b600082821c905092915050565b600061037060001984600802610352565b1980831691505092915050565b6000610389838361035f565b9150826002028217905092915050565b6103a282610156565b67ffffffffffffffff8111156103bb576103ba610161565b5b6103c582546101b2565b6103d082828561030c565b600060209050601f8311600181146104035760008415610ef1578287015190505b6103fb858261037d565b865550610463565b601f198416610411866101e3565b60005b8281101561043957848901518255600182019150602085019450602081019050610414565b868310156104565784890151610452601f89168261035f565b8355505b6001600288020188555050505b505050505050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006104968261046b565b9050919050565b6104a68161048b565b82525050565b60006020820190506104c1600083018461049d565b92915050565b610c35806104d66000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c806340c10f191161005b57806340c10f191461013157806370a082311461014d57806395d89b411461017d578063a9059cbb1461019b57600080fd5b806306fdde031461008d578063095ea7b3146100ab57806318160ddd146100db57806323b872dd146100f9575b600080fd5b6100956101cb565b6040516100a29190610945565b60405180910390f35b6100c560048036038101906100c09190610a00565b61025d565b6040516100d29190610a5b565b60405180910390f35b6100e3610280565b6040516100f09190610a85565b60405180910390f35b610113600480360381019061010e9190610aa0565b61028a565b60405161012893929190610af3565b60405180910390f35b61014b60048036038101906101469190610a00565b6102b9565b005b61016760048036038101906101629190610b2a565b6102cf565b6040516101749190610a85565b60405180910390f35b610185610317565b6040516101929190610945565b60405180910390f35b6101b560048036038101906101b09190610a00565b6103a9565b6040516101c29190610a5b565b60405180910390f35b6060600380546101da90610b86565b80601f016020809104026020016040519081016040528092919081815260200182805461020690610b86565b80156102535780601f1061022857610100808354040283529160200191610253565b820191906000526020600020905b81548152906001019060200180831161023657829003601f168201915b5050505050905090565b600080610268610404565b905061027581858561040c565b600191505092915050565b6000600254905090565b600080600080610298610404565b93506102a587878761041e565b925092509250509350935093565b6102c38282610549565b5050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461032690610b86565b80601f016020809104026020016040519081016040528092919081815260200182805461035290610b86565b801561039f5780601f106103745761010080835404028352916020019161039f565b820191906000526020600020905b81548152906001019060200180831161038257829003601f168201915b5050505050905090565b6000806103b4610404565b90506103c18185856105cb565b600191505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006103f7826103cc565b9050919050565b600033905090565b6104168383836001610727565b505050565b60008060008061042a866102cf565b9050600061043785610280565b905086811015610484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161047b90610c09565b60405180910390fd5b61048e87886105cb565b8094508195505050506104a0876102cf565b8210156104e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104d990610c75565b60405180910390fd5b6104ed8888886108f4565b6104f78888610549565b505050935093509350935093565b600061051082610967565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1603610588576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161057f90610ce1565b60405180910390fd5b610594600083836109ae565b80600260008282546105a69190610d30565b92505081905550806000808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361063d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161063490610dd6565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16036106af576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106a690610e68565b60405180910390fd5b6106ba8383836109ae565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610740576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161073790610efa565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825401925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161082e9190610a85565b60405180910390a3610841848484610a3a565b50505050565b600073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff16036108b9576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108b090610f8c565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff160361092b576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109229061101e565b60405180910390fd5b6109388484848461103f565b50505050565b600081519050919050565b600082825260208201905092915050565b6000601f19601f8301169050919050565b600061097682610939565b6109808185610944565b93506109908185602086016110a9565b61099981610955565b840191505092915050565b505050565b505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109ec57607f821691505b6020821081036109ff576109fe6109a5565b5b50919050565b60008115159050919050565b610a1a81610a05565b82525050565b6000602082019050610a356000830184610a11565b92915050565b6000819050919050565b610a4e81610a3b565b82525050565b6000602082019050610a696000830184610a45565b92915050565b600080fd5b610a7d81610a3b565b8114610a8857600080fd5b50565b600081359050610a9a81610a74565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610acb82610aa0565b9050919050565b610adb81610ac0565b8114610ae657600080fd5b50565b600081359050610af881610ad2565b92915050565b60008060408385031215610b1557610b14610a6f565b5b6000610b2385828601610ae9565b9250506020610b3485828601610a8b565b9150509250929050565b600060208284031215610b5457610b53610a6f565b5b6000610b6284828501610ae9565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bb857607f821691505b602082108103610bcb57610bca610b6b565b5b50919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000610c2d602583610944565b9150610c3882610bd1565b604082019050919050565b60006020820190508181036000830152610c5c81610c20565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000610cbf602383610944565b9150610cca82610c63565b604082019050919050565b60006020820190508181036000830152610cee81610cb2565b9050919050565b7f45524332303a206d696e7420746f20746865207a65726f206164647265737300600082015250565b6000610d2b601f83610944565b9150610d3682610cf5565b602082019050919050565b60006020820190508181036000830152610d5a81610d1e565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d9b82610a3b565b9150610da683610a3b565b9250828201905080821115610dbe57610dbd610d61565b5b92915050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610e20602483610944565b9150610e2b82610dc4565b604082019050919050565b60006020820190508181036000830152610e4f81610e13565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000610eb2602283610944565b9150610ebd82610e56565b604082019050919050565b60006020820190508181036000830152610ee181610ea5565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000610f44602683610944565b9150610f4f82610ee8565b604082019050919050565b60006020820190508181036000830152610f7381610f37565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b6000610fd6602583610944565b9150610fe182610f7a565b604082019050919050565b6000602082019050818103600083015261100581610fc9565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611068602383610944565b915061107382611012565b604082019050919050565b600060208201905081810360008301526110978161105b565b9050919050565b600080fd5b600080fd5b60008083601f8401126110be576110bd61109e565b5b8235905067ffffffffffffffff8111156110db576110da6110a3565b5b6020830191508360018202830111156110f7576110f66110a8565b5b9250929050565b6000819050919050565b600061111f61111a611115846103cc565b6110fe565b6103cc565b9050919050565b600061113182611104565b9050919050565b600061114382611126565b9050919050565b61115381611138565b82525050565b600060208201905061116e600083018461114a565b92915050565b505050565b505050565b50505056fe"

const PROMPT_TOKEN_ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "faucet",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "to", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
    "name": "transfer",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "spender", "type": "address"}, {"internalType": "uint256", "name": "amount", "type": "uint256"}],
    "name": "approve",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Deploying PromptTestToken...');
    
    const deployerPrivateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');
    if (!deployerPrivateKey) {
      throw new Error('DEPLOYER_PRIVATE_KEY not found');
    }

    console.log('Creating account and clients...');
    const account = privateKeyToAccount(deployerPrivateKey as `0x${string}`);
    
    const publicClient = createPublicClient({
      chain: baseSepolia,
      transport: http()
    });

    const walletClient = createWalletClient({
      account,
      chain: baseSepolia,
      transport: http()
    });

    console.log('Deploying PromptTestToken from address:', account.address);

    // Deploy the actual PromptTestToken contract
    const hash = await walletClient.deployContract({
      abi: PROMPT_TOKEN_ABI,
      bytecode: PROMPT_TOKEN_BYTECODE as `0x${string}`,
    });

    console.log('Transaction hash:', hash);

    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    console.log('Contract deployed at:', receipt.contractAddress);

    return new Response(
      JSON.stringify({ 
        success: true, 
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        name: "Prompt Test Token",
        symbol: "PROMPTTEST",
        message: "PromptTestToken deployed successfully"
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('PROMPTTEST deploy error:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message,
        stack: error.stack
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});