import { createPublicClient, createWalletClient, http, parseEther } from 'npm:viem'
import { baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Simple ERC20 token bytecode
const PROMPTTEST_BYTECODE = "0x608060405234801561001057600080fd5b506040516200178c3803806200178c8339818101604052810190620000369190620002e0565b83600390816200004791906200058a565b5082600490816200005991906200058a565b508160058190555080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef82604051620000ec919062000682565b60405180910390a250505050620006e7565b6000604051905090565b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6200016a8262000121565b810181811067ffffffffffffffff821117156200018c576200018b62000132565b5b80604052505050565b6000620001a162000103565b9050620001af828262000161565b919050565b600067ffffffffffffffff821115620001d257620001d162000132565b5b620001dd8262000121565b9050602081019050919050565b60005b8381101562000210578082015181840152602081019050620001f3565b60008484015250505050565b6000620002336200022d84620001b4565b62000195565b9050828152602081018484840111156200025257620002516200011c565b5b6200025f848285620001f0565b509392505050565b600082601f8301126200027f576200027e62000117565b5b8151620002918482602086016200021c565b91505092915050565b6000819050919050565b620002af816200029a565b8114620002bb57600080fd5b50565b600081519050620002cf81620002a4565b92915050565b600080fd5b600080fd5b600080600060808486031215620002fb57620002fa6200010d565b5b600084015167ffffffffffffffff8111156200031c576200031b620002d5565b5b6200032a8682870162000267565b935050602084015167ffffffffffffffff8111156200034e576200034d620002d5565b5b6200035c8682870162000267565b92505060406200036f86828701620002be565b91505060606200038286828701620002be565b9150509250925092565b600081519050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680620003e057607f821691505b602082108103620003f657620003f562000398565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302620004807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8262000441565b6200048c868362000441565b95508019841693508086168417925050509392505050565b6000819050919050565b6000620004cf620004c9620004c3846200029a565b620004a4565b6200029a565b9050919050565b6000819050919050565b620004eb83620004ae565b62000503620004fa82620004d6565b8484546200044e565b825550505050565b600090565b6200051a6200050b565b62000527818484620004e0565b505050565b5b818110156200054f5762000543600082620005105b5060018101905062000532565b5b5050565b601f821115620005965762000568816200042b565b620005738462000440565b8101602085101562000583578190505b6200059b620005928562000440565b830182620005315b505050505050565b600082821c905092915050565b6000620005c360001984600802620005a3565b1980831691505092915050565b6000620005de8383620005b0565b9150826002028217905092915050565b620005f9826200038c565b67ffffffffffffffff81111562000615576200061462000132565b5b620006218254620003c7565b6200062e82828562000553565b600060209050601f83116001811462000666576000841562000651578287015190505b6200065d8582620005d0565b865550620006cd565b601f19841662000676866200042b565b60005b82811015620006a05784890151825560018201915060208501945060208101905062000679565b86831015620006c05784890151620006bc601f891682620005b0565b8355505b6001600288020188555050505b505050505050565b620006e0816200029a565b82525050565b6000602082019050620007186000830184620006d5565b92915050565b610ff880620007246000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063313ce5671161005b578063313ce567146100d257806370a08231146100f057806395d89b4114610120578063a9059cbb1461013e5761007d565b806306fdde031461008257806318160ddd146100a057806323b872dd146100be575b600080fd5b61008a61016e565b6040516100979190610a59565b60405180910390f35b6100a86101fc565b6040516100b59190610a94565b60405180910390f35b6100d860048036038101906100d39190610b5a565b610202565b6040516100c99190610bc2565b60405180910390f35b6100da610439565b6040516100e79190610bf9565b60405180910390f35b61010a60048036038101906101059190610c14565b61043f565b6040516101179190610a94565b60405180910390f35b610128610487565b6040516101359190610a59565b60405180910390f35b61015860048036038101906101539190610c41565b610515565b6040516101659190610bc2565b60405180910390f35b6003805461017b90610cb0565b80601f01602080910402602001604051908101604052809291908181526020018280546101a790610cb0565b80156101f45780601f106101c9576101008083540402835291602001916101f4565b820191906000526020600020905b8154815290600101906020018083116101d757829003601f168201915b505050505081565b60015481565b600080600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610289576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028090610d24565b60405180910390fd5b82816102959190610d73565b600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461032591906109f8565b925050819055508373ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8560405161038991906109f8565b60405180910390a360019150509392505050565b600081836103ab91906109f8565b905092915050565b60055481565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6004805461041490610cb0565b80601f016020809104026020016040519081016040528092919081815260200182805461044090610cb0565b801561048d5780601f106104625761010080835404028352916020019161048d565b820191906000526020600020905b81548152906001019060200180831161047057829003601f168201915b505050505081565b600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050828110156104fc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f390610d24565b60405180910390fd5b8281610508919061073565b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461059a91906109f8565b925050819055508373ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef856040516105fe91906109f8565b60405180910390a3600191505092915050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061064182610616565b9050919050565b61065181610636565b811461065c57600080fd5b50565b60008135905061066e81610648565b92915050565b6000819050919050565b61068781610674565b811461069257600080fd5b50565b6000813590506106a48161067e565b92915050565b6000806000606084860312156106c3576106c2610611565b5b60006106d18682870161065f565b93505060206106e28682870161065f565b92505060406106f386828701610695565b9150509250925092565b60008115159050919050565b610712816106fc565b82525050565b600060208201905061072d6000830184610709565b92915050565b600060ff82169050919050565b61074981610733565b82525050565b600060208201905061076460008301846107409265b92915050565b6000602082840312156107785761077610612565b5b600061078685828501610660565b91505092915050565b600060408284031215610648576107a6610611565b5b60006107b48682870161065f565b92505060206107c586828701610695565b9150509250929050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561080a5780820151818401526020810190506107ef565b60008484015250505050565b6000601f19601f8301169050919050565b6000610832826107d0565b61083c81856107db565b935061084c8185602086016107ec565b61085581610816565b840191505092915050565b6000602082019050818103600083015261087a8184610827565b905092915050565b61088b81610674565b82525050565b60006020820190506108a66000830184610882565b92915050565b7f496e73756666696369656e742062616c616e636500000000000000000000000600082015250565b60006108e26014836107db565b91506108ed826108ac565b602082019050919050565b60006020820190508181036000830152610911816108d5565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b600060028204905060018216806109959057607f821691505b6020821081036109765761097561091850565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109b882610674565b91506109c383610674565b925082820190508082111561095b576109da61097d565b5b92915050565b60006109eb82610674565b91506109f683610674565b925082820390508181111561095e57610a0d61097d565b5b9291505056fea2646970667358221220000000000000000000000000000000000000000000000000000000000000000064736f6c63430008110033"

const PROMPTTEST_ABI = [
  {
    "inputs": [
      {"internalType": "string", "name": "_name", "type": "string"},
      {"internalType": "string", "name": "_symbol", "type": "string"},
      {"internalType": "uint8", "name": "_decimals", "type": "uint8"},
      {"internalType": "uint256", "name": "_totalSupply", "type": "uint256"}
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol", 
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "to", "type": "address"},
      {"internalType": "uint256", "name": "amount", "type": "uint256"}
    ],
    "name": "transfer",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  console.log('Deploy PROMPTTEST Token function called');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    // Get the deployer's private key from environment
    const privateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');
    if (!privateKey) {
      throw new Error('DEPLOYER_PRIVATE_KEY not found in environment variables');
    }

    console.log('Creating account and clients...');

    // Create account from private key
    const account = privateKeyToAccount(privateKey as `0x${string}`);
    console.log('Deployer account:', account.address);

    // Create public client for reading from the blockchain
    const publicClient = createPublicClient({
      chain: baseSepolia,
      transport: http()
    });

    // Create wallet client for deploying contracts
    const walletClient = createWalletClient({
      account,
      chain: baseSepolia,
      transport: http()
    });

    console.log('Deploying PROMPTTEST token...');

    // Deploy the token contract with constructor arguments
    const hash = await walletClient.deployContract({
      abi: PROMPTTEST_ABI,
      bytecode: PROMPTTEST_BYTECODE as `0x${string}`,
      args: [
        "Prompt Test Token",  // name
        "PROMPTTEST",         // symbol
        18,                   // decimals
        parseEther('1000000') // total supply (1M tokens)
      ]
    });

    console.log('Deployment transaction sent, hash:', hash);

    // Wait for the transaction to be mined
    const receipt = await publicClient.waitForTransactionReceipt({ hash });

    console.log('Transaction mined in block:', receipt.blockNumber);
    console.log('Contract deployed at:', receipt.contractAddress);

    return new Response(
      JSON.stringify({
        success: true,
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        blockNumber: receipt.blockNumber.toString()
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('Error deploying PROMPTTEST token:', error);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});