import { createPublicClient, createWalletClient, http } from 'npm:viem'
import { baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Very simple working ERC20 contract bytecode (hardcoded values)
const SIMPLE_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506b033b2e3c9fd0803ce8000000600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040516101279190610228565b60405180910390a361023e565b6000819050919050565b61014881610135565b82525050565b6000602082019050610163600083018461013f565b92915050565b610a52806101786000396000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c8063313ce56711610066578063313ce567146101395780636fdde031461015757806370a082311461017557806395d89b41146101a5578063a9059cbb146101c357610093565b806306fdde0314610098578063095ea7b3146100b657806318160ddd146100e657806323b872dd14610104575b600080fd5b6100a06101f3565b6040516100ad9190610747565b60405180910390f35b6100d060048036038101906100cb91906107d0565b61022c565b6040516100dd919061082b565b60405180910390f35b6100ee61031e565b6040516100fb9190610855565b60405180910390f35b61011e60048036038101906101199190610870565b610324565b60405161013093929190610892565b60405180910390f35b610141610520565b60405161014e91906108de565b60405180910390f35b61015f610525565b60405161016c9190610747565b60405180910390f35b61018f600480360381019061018a91906108f9565b61055e565b60405161019c9190610855565b60405180910390f35b6101ad6105a6565b6040516101ba9190610747565b60405180910390f35b6101dd60048036038101906101d891906107d0565b6105df565b6040516101ea919061082b565b60405180910390f35b60606040518060400160405280601181526020017f50726f6d70742054657374546f6b656e000000000000000000000000000000008152509050919050565b600081600360003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508273ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161030b9190610855565b60405180910390a36001905092915050565b60015481565b600080600360008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050600084600260008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015905080158061042657508085826104239190610936565b11155b61046f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161046690610a06565b60405180910390fd5b85816104789190610936565b600360008973ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555061050686868661071a565b60019350505050949350505050565b601290565b60606040518060400160405280600b81526020017f50524f4d5054544553540000000000000000000000000000000000000000000008152509050919050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280600b81526020017f50524f4d5054544553540000000000000000000000000000000000000000000008152509050919050565b60006105ec33848461071a565b905092915050565b600082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561067c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161067390610a72565b60405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106cb9190610936565b9250508190555081600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546107219190610913565b925050819055506001915050929190565b6000610734848484610649565b905093929192565b600081519050919050565b600082825260208201905092915050565b60005b8381101561077957808201518184015260208101905061075e565b60008484015250505050565b6000601f19601f8301169050919050565b60006107a18261073f565b6107ab8185610750565b93506107bb818560208601610761565b6107c481610785565b840191505092915050565b600080604083850312156107e6576107e5610a96565b5b60006107f485828601610a9b565b925050602061080585828601610aad565b9150509250929050565b60008115159050919050565b6108248161080f565b82525050565b600060208201905061083f600083018461081b565b92915050565b6000819050919050565b61085881610845565b82525050565b6000602082019050610873600083018461084f565b92915050565b60008060006060848603121561089257610891610a96565b5b60006108a086828701610a9b565b93505060206108b186828701610a9b565b92505060406108c286828701610aad565b9150509250925092565b600060ff82169050919050565b6108e2816108cc565b82525050565b60006020820190506108fd60008301846108d9565b92915050565b60006020828403121561091957610918610a96565b5b600061092785828601610a9b565b91505092915050565b600061093b82610845565b915061094683610845565b925082820390508181111561095e5761095d610ab8565b5b92915050565b7f416c6c6f77616e63652065786365656465640000000000000000000000000000600082015250565b600061099a601283610750565b91506109a582610964565b602082019050919050565b600060208201905081810360008301526109c98161098d565b9050919050565b7f496e73756666696369656e742062616c616e636500000000000000000000000600082015250565b6000610a06601483610750565b9150610a11826109d0565b602082019050919050565b60006020820190508181036000830152610a35816109f9565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a6c82610a41565b9050919050565b610a7c81610a61565b8114610a8757600080fd5b50565b600081359050610a9981610a73565b92915050565b6000819050919050565b610ab281610a9f565b8114610abd57600080fd5b50565b600081359050610acf81610aa6565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610b1082610a9f565b9150610b1b83610a9f565b9250828201905080821115610b3357610b32610ad5565b5b9291505056fea264697066735822122000000000000000000000000000000000000000000000000000000000000000000064736f6c63430008170033"

const SIMPLE_TOKEN_ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol", 
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "to", "type": "address"},
      {"internalType": "uint256", "name": "amount", "type": "uint256"}
    ],
    "name": "transfer",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  console.log('Deploy PROMPTTEST Token function started');

  // Handle CORS preflight requests
  if (req.method === 'OPTIONS') {
    console.log('Handling OPTIONS request');
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Getting deployer private key...');
    const privateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');
    if (!privateKey) {
      console.error('DEPLOYER_PRIVATE_KEY not found');
      throw new Error('DEPLOYER_PRIVATE_KEY not found in environment variables');
    }

    console.log('Creating account and clients...');
    const account = privateKeyToAccount(privateKey as `0x${string}`);
    console.log('Deployer account address:', account.address);

    const publicClient = createPublicClient({
      chain: baseSepolia,
      transport: http()
    });

    const walletClient = createWalletClient({
      account,
      chain: baseSepolia,
      transport: http()
    });

    console.log('Starting contract deployment...');
    
    const hash = await walletClient.deployContract({
      abi: SIMPLE_TOKEN_ABI,
      bytecode: SIMPLE_TOKEN_BYTECODE as `0x${string}`
    });

    console.log('Transaction hash:', hash);

    const receipt = await publicClient.waitForTransactionReceipt({ 
      hash,
      timeout: 60000
    });

    console.log('Contract deployed successfully!');
    console.log('Contract address:', receipt.contractAddress);
    console.log('Block number:', receipt.blockNumber);

    return new Response(
      JSON.stringify({
        success: true,
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        blockNumber: receipt.blockNumber.toString(),
        name: "Prompt TestToken",
        symbol: "PROMPTTEST"
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 200,
      }
    );

  } catch (error) {
    console.error('Deployment error:', error);
    console.error('Error stack:', error.stack);
    
    return new Response(
      JSON.stringify({
        success: false,
        error: error.message,
        details: error.stack
      }),
      {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 500,
      }
    );
  }
});