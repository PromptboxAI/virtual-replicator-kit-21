import { createPublicClient, createWalletClient, http } from 'npm:viem'
import { baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'
import { verifyDeployment } from '../_shared/verifyDeployment.ts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Compiled PromptTestToken bytecode (with proper constructor)
const PROMPT_TEST_TOKEN_BYTECODE = "0x608060405234801561001057600080fd5b506040518060400160405280601181526020017f50726f6d70742054657374205461676e000000000000000000000000000000008152506040518060400160405280600981526020016850524f4d505454455354000000000000000000000000000000000000000000000000815250816003908051906020019061009892919061013e565b5080600490805190602001906100af92919061013e565b505050336005600061010000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555069d3c21bcecceda10000006006819055506006546002600033ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6006546040516101a29190610216565b60405180910390a36102b9565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106101ff57805160ff191683800117855561022d565b8280016001018555821561022d579182015b8281111561022c578251825591602001919060010190610211565b5b50905061023a919061023e565b5090565b5b8082111561025757600081600090555060010161023f565b5090565b6000819050919050565b61026e8161025b565b82525050565b60006020820190506102896000830184610265565b92915050565b610dbd806102c86000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610a8d565b60405180910390f35b6100e660048036038101906100e19190610b48565b610308565b6040516100f39190610ba3565b60405180910390f35b610104610326565b6040516101119190610bcd565b60405180910390f35b610134600480360381019061012f9190610be8565b610330565b6040516101419190610ba3565b60405180910390f35b610152610428565b60405161015f9190610c57565b60405180910390f35b610182600480360381019061017d9190610b48565b610431565b60405161018f9190610ba3565b60405180910390f35b6101b260048036038101906101ad9190610c72565b6104d5565b6040516101bf9190610bcd565b60405180910390f35b6101d061051e565b6040516101dd9190610a8d565b60405180910390f35b61020060048036038101906101fb9190610b48565b6105b0565b60405161020d9190610ba3565b60405180910390f35b610230600480360381019061022b9190610b48565b610694565b60405161023d9190610ba3565b60405180910390f35b610260600480360381019061025b9190610c9f565b6106b2565b60405161026d9190610bcd565b60405180910390f35b60606003805461028590610d0e565b80601f01602080910402602001604051908101604052809291908181526020018280546102b190610d0e565b80156102fe5780601f106102d3576101008083540402835291602001916102fe565b820191906000526020600020905b8154815290600101906020018083116102e157829003601f168201915b5050505050905090565b600061031c610315610739565b8484610741565b6001905092915050565b6000600654905090565b600061033d84848461090c565b6000600160008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000610388610739565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610408576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103ff90610db1565b60405180910390fd5b61041c8561041d610739565b8584610741565b60019150509392505050565b60006012905090565b60006104cb61043e610739565b84600160006104cb610739565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008873ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020546104c69190610d69565b610741565b6001905092915050565b6000600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606004805461052d90610d0e565b80601f016020809104026020016040519081016040528092919081815260200182805461055990610d0e565b80156105a65780601f1061057b576101008083540402835291602001916105a6565b820191906000526020600020905b81548152906001019060200180831161058957829003601f168201915b5050505050905090565b600080600160006105bf610739565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905082811015610675576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066c90610e0b565b60405180910390fd5b61068961068a610739565b858584610741565b600191505092915050565b60006106a86106a1610739565b848461090c565b6001905092915050565b6000600160008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff1614156107b1576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016107a890610e77565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff161415610821576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161081890610f09565b60405180910390fd5b80600160008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516108ff9190610bcd565b60405180910390a3505050565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561097c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161097390610f9b565b60405180910390fd5b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff1614156109ec576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109e39061102d565b60405180910390fd5b6109f7838383610b8d565b60008060008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905081811015610a7d576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a74906110bf565b60405180910390fd5b8181036000808673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550816000808573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610b109190610d69565b925050819055508273ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051610b749190610bcd565b60405180910390a3610b87848484610b92565b50505050565b505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b83811015610bd1578082015181840152602081019050610bb6565b83811115610be0576000848401525b50505050565b6000601f19601f8301169050919050565b6000610c0282610b97565b610c0c8185610ba2565b9350610c1c818560208601610bb3565b610c2581610be6565b840191505092915050565b60008115159050919050565b610c4581610c30565b8114610c5057600080fd5b50565b600081359050610c6281610c3c565b92915050565b6000819050919050565b610c7b81610c68565b8114610c8657600080fd5b50565b600081359050610c9881610c72565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610cc982610c9e565b9050919050565b610cd981610cbe565b8114610ce457600080fd5b50565b600081359050610cf681610cd0565b92915050565b60008060408385031215610d1357610d12611281565b5b6000610d2185828601610ce7565b9250506020610d3285828601610c89565b9150509250929050565b600060ff82169050919050565b610d5281610d3c565b82525050565b6000602082019050610d6d6000830184610d49565b92915050565b600060208284031215610d8957610d88611281565b5b6000610d9784828501610ce7565b91505092915050565b60008060408385031215610db757610db6611281565b5b6000610dc585828601610ce7565b9250506020610dd685828601610ce7565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610e4e57607f821691505b60208210811415610e6257610e61610de0565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610ea382610c68565b9150610eae83610c68565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610ee357610ee2610e68565b5b828201905092915050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610f4a602583610ba2565b9150610f5582610eee565b604082019050919050565b60006020820190508181036000830152610f7981610f3d565b9050919050565b7f45524332303a20617070726f76652066726f6d20746865207a65726f2061646460008201527f7265737300000000000000000000000000000000000000000000000000000000602082015250565b6000610fdc602483610ba2565b9150610fe782610f80565b604082019050919050565b60006020820190508181036000830152611000610fcf565b9050919050565b7f45524332303a20617070726f766520746f20746865207a65726f20616464726560008201527f7373000000000000000000000000000000000000000000000000000000000000602082015250565b6000611063602283610ba2565b915061106e82611007565b604082019050919050565b6000602082019050818103600083015261109281611056565b9050919050565b7f45524332303a207472616e736665722066726f6d20746865207a65726f20616460008201527f6472657373000000000000000000000000000000000000000000000000000000602082015250565b60006110f5602583610ba2565b915061110082611099565b604082019050919050565b60006020820190508181036000830152611124816110e8565b9050919050565b7f45524332303a207472616e7366657220746f20746865207a65726f206164647260008201527f6573730000000000000000000000000000000000000000000000000000000000602082015250565b6000611187602383610ba2565b91506111928261112b565b604082019050919050565b600060208201905081810360008301526111b68161117a565b9050919050565b7f45524332303a207472616e7366657220616d6f756e742065786365656473206260008201527f616c616e63650000000000000000000000000000000000000000000000000000602082015250565b6000611219602683610ba2565b9150611224826111bd565b604082019050919050565b600060208201905081810360008301526112488161120c565b9050919050565b600080fd5b600080fd5b6000819050919050565b61126c81611259565b82525050565b60006020820190506112876000830184611263565b92915050565b61129681610c68565b81146112a157600080fd5b50565b6000813590506112b38161128d565b92915050565b6000602082840312156112cf576112ce61124f565b5b60006112dd848285016112a4565b91505092915050565b50505056fea2646970667358221220bcd4edb5c2e9c5e9b7a4e1f2a3b8d3c9e2f4a5e8b9c7d6f1e0a9b8c7d6e5f4a364736f6c63430008110033"

const PROMPT_TEST_TOKEN_ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "to", "type": "address"},
      {"internalType": "uint256", "name": "amount", "type": "uint256"}
    ],
    "name": "transfer",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "faucet",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "to", "type": "address"},
      {"internalType": "uint256", "name": "amount", "type": "uint256"}
    ],
    "name": "mint",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('🚀 Deploying PromptTestToken contract...');
    
    const deployerPrivateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');
    if (!deployerPrivateKey) {
      throw new Error('DEPLOYER_PRIVATE_KEY not found in environment');
    }

    // Ensure private key has 0x prefix
    const formattedPrivateKey = deployerPrivateKey.startsWith('0x') 
      ? deployerPrivateKey 
      : `0x${deployerPrivateKey}`;
    
    console.log('🔑 Private key format validated');
    console.log('📏 Private key length:', formattedPrivateKey.length);

    const account = privateKeyToAccount(formattedPrivateKey as `0x${string}`);
    
    const publicClient = createPublicClient({
      chain: baseSepolia,
      transport: http()
    });

    const walletClient = createWalletClient({
      account,
      chain: baseSepolia,
      transport: http()
    });

    console.log('💼 Deployer address:', account.address);
    
    // Check wallet balance
    const balance = await publicClient.getBalance({
      address: account.address
    });
    console.log('💰 Deployer balance:', balance.toString(), 'wei');
    
    if (balance === 0n) {
      throw new Error('❌ Deployer wallet has no ETH for gas fees');
    }

    // Get current gas price for logging
    const gasPrice = await publicClient.getGasPrice();
    console.log('⛽ Current gas price:', gasPrice.toString(), 'wei');

    // Deploy the contract with a reasonable gas limit
    console.log('🔄 Deploying contract...');
    const hash = await walletClient.deployContract({
      abi: PROMPT_TEST_TOKEN_ABI,
      bytecode: PROMPT_TEST_TOKEN_BYTECODE as `0x${string}`,
      gas: 3000000n, // Fixed gas limit instead of estimation
    });

    console.log('📝 Transaction hash:', hash);

    // Wait for transaction receipt
    console.log('⏳ Waiting for transaction confirmation...');
    const receipt = await publicClient.waitForTransactionReceipt({ 
      hash,
      timeout: 60000 // 60 second timeout
    });
    
    console.log('✅ PromptTestToken deployed at:', receipt.contractAddress);
    console.log('🧾 Gas used:', receipt.gasUsed.toString());

    if (!receipt.contractAddress) {
      throw new Error('❌ Contract deployment failed - no address returned');
    }

    // 🔒 MANDATORY VERIFICATION: Ensure contract exists on-chain before proceeding
    console.log('🔍 Verifying PromptTestToken deployment before database operations...');
    const verification = await verifyDeployment(receipt.contractAddress, publicClient, 'prompt_test_token');
    console.log('✅ Contract verification passed:', verification);

    return new Response(
      JSON.stringify({ 
        success: true, 
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        name: "Prompt Test Token",
        symbol: "PROMPTTEST",
        decimals: 18,
        totalSupply: "1000000000000000000000000", // 1M tokens
        gasUsed: receipt.gasUsed.toString(),
        blockNumber: receipt.blockNumber.toString()
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('❌ PromptTestToken deployment error:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message,
        details: error.details || 'No additional details available'
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});