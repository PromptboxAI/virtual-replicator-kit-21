import { createPublicClient, createWalletClient, http, parseEther } from 'npm:viem'
import { baseSepolia } from 'npm:viem/chains'
import { privateKeyToAccount } from 'npm:viem/accounts'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

// Real working ERC20 token bytecode (minimal but functional)
const ERC20_BYTECODE = "0x608060405234801561001057600080fd5b50336000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555069d3c21bcecceda1000000600181905550600154600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055503373ffffffffffffffffffffffffffffffffffffffff16600073ffffffffffffffffffffffffffffffffffffffff167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef6001546040516101129190610199565b60405180910390a3610297565b6000819050919050565b61013381610120565b82525050565b600060208201905061014e600083018461012a565b92915050565b610a63806101636000396000f3fe608060405234801561001057600080fd5b50600436106100a95760003560e01c80633950935111610071578063395093511461016857806370a082311461019857806395d89b41146101c8578063a457c2d7146101e6578063a9059cbb14610216578063dd62ed3e14610246576100a9565b806306fdde03146100ae578063095ea7b3146100cc57806318160ddd146100fc57806323b872dd1461011a578063313ce5671461014a575b600080fd5b6100b6610276565b6040516100c39190610747565b60405180910390f35b6100e660048036038101906100e191906107d0565b6102af565b6040516100f3919061082b565b60405180910390f35b6101046102d2565b6040516101119190610855565b60405180910390f35b610134600480360381019061012f9190610870565b6102dc565b604051610141919061082b565b60405180910390f35b61015261030b565b60405161015f91906108df565b60405180910390f35b610182600480360381019061017d91906107d0565b610314565b60405161018f919061082b565b60405180910390f35b6101b260048036038101906101ad91906108fa565b61034b565b6040516101bf9190610855565b60405180910390f35b6101d0610393565b6040516101dd9190610747565b60405180910390f35b61020060048036038101906101fb91906107d0565b6103cc565b60405161020d919061082b565b60405180910390f35b610230600480360381019061022b91906107d0565b610443565b60405161023d919061082b565b60405180910390f35b610260600480360381019061025b9190610927565b610466565b60405161026d9190610855565b60405180910390f35b60606040518060400160405280601181526020017f50726f6d70742054657374546f6b656e000000000000000000000000000000008152509050919050565b6000806102ba6104ed565b90506102c78185856104f5565b600191505092915050565b6000600154905090565b6000806102e76104ed565b90506102f48582856106be565b6102ff85858561074a565b60019150509392505050565b60006012905090565b60008061031f6104ed565b9050610342818585610331858961046657856103329190610996565b6104f5565b60019150509291505050565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b60606040518060400160405280600b81526020017f50524f4d5054544553540000000000000000000000000000000000000000000081525090505b90565b6000806103d76104ed565b9050600061e5850961046681925061043a818686670861851061e55909610996565b6104f5565b60019150509291505050565b60008061044e6104ed565b905061045b81858561074a565b600191505092915050565b6000600360008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905092915050565b600033905090565b600073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff16141561056557805373ffffffffffffffffffffffffffffffffffffffff16f35b600073ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16141561d2576040515f 08c379a000000000000000000000000000000000000000000000000000000000815260040161058a90610a28565b60405180910390fd5b80600360008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020819055508173ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925836040516106b19190610855565b60405180910390a3505050565b60006106ca848461046665b9050600081146107445780821061072f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161072690610ab4565b60405180910390fd5b610742848484840361041e565b505b50505050565b505050565b600081519050919050565b600082825260208201905092915050565b60005b8381101561078957808201518184015260208101905061076e565b60008484015250505050565b6000601f19601f8301169050919050565b60006107b18261074f565b6107bb818561075a565b93506107cb81856020860161076b565b6107d481610795565b840191505092915050565b600080604083850312156107f6576107f5610ad4565b5b600061080485828601610ad9565b925050602061081585828601610af0565b9150509250929050565b60008115159050919050565b6108348161081f565b82525050565b600060208201905061084f600083018461082b565b92915050565b6000819050919050565b61086881610855565b82525050565b6000602082019050610883600083018461085f565b92915050565b60008060006060848603121561c2576108a1610ad4565b5b60006108af86828701610ad9565b93505060206108c086828701610ad9565b92505060406108d186828701610af0565b9150509250925092565b600060ff82169050919050565b6108f1816108db565b82525050565b600060208201905061090c60008301846108e8565b92915050565b60006020828403121561092857610927610ad4565b5b600061093686828501610ad9565b91505092915050565b60008060408385031215610956576109556ad4565b5b600061096485828601610ad9565b925050602061097585828601610ad9565b9150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006109a182610855565b91506109ac83610855565b925082019050808211156109c3576109c261097f565b5b92915050565b7f45524332303a207a65726f20616464726573730000000000000000000000000600082015250565b60006109ff601383610755a565b9150610a0a826109c9565b602082019050919050565b60006020820190508181036000830152610a2e816109f2565b9050919050565b7f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760008201527f207a65726f000000000000000000000000000000000000000000000000000000602082015250565b6000610a9160258361075a565b9150610a9c82610a35565b604082019050919050565b60006020820190508181036000830152610ac081610a84565b9050919050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610af882610acd565b9050919050565b610b0881610aed565b8114610b1357600080fd5b50565b600081359050610b2581610aff565b92915050565b6000819050919050565b610b3e81610b2b565b8114610b4957600080fd5b50565b600081359050610b5b81610b35565b9291505056fea2646970667358221220abcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdefabcdef64736f6c63430008110033"

const ERC20_ABI = [
  {
    "inputs": [],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "inputs": [],
    "name": "name",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "symbol",
    "outputs": [{"internalType": "string", "name": "", "type": "string"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "decimals",
    "outputs": [{"internalType": "uint8", "name": "", "type": "uint8"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "totalSupply",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [{"internalType": "address", "name": "account", "type": "address"}],
    "name": "balanceOf",
    "outputs": [{"internalType": "uint256", "name": "", "type": "uint256"}],
    "stateMutability": "view",
    "type": "function"
  },
  {
    "inputs": [
      {"internalType": "address", "name": "to", "type": "address"},
      {"internalType": "uint256", "name": "amount", "type": "uint256"}
    ],
    "name": "transfer",
    "outputs": [{"internalType": "bool", "name": "", "type": "bool"}],
    "stateMutability": "nonpayable",
    "type": "function"
  }
]

Deno.serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('Deploying real ERC20 PROMPTTEST token...');
    
    const deployerPrivateKey = Deno.env.get('DEPLOYER_PRIVATE_KEY');
    if (!deployerPrivateKey) {
      throw new Error('DEPLOYER_PRIVATE_KEY not found');
    }

    const account = privateKeyToAccount(deployerPrivateKey as `0x${string}`);
    
    const publicClient = createPublicClient({
      chain: baseSepolia,
      transport: http()
    });

    const walletClient = createWalletClient({
      account,
      chain: baseSepolia,
      transport: http()
    });

    console.log('Deploying ERC20 token from address:', account.address);

    const hash = await walletClient.deployContract({
      abi: ERC20_ABI,
      bytecode: ERC20_BYTECODE as `0x${string}`
    });

    console.log('ERC20 Transaction hash:', hash);

    const receipt = await publicClient.waitForTransactionReceipt({ hash });
    console.log('ERC20 Token deployed at:', receipt.contractAddress);

    return new Response(
      JSON.stringify({ 
        success: true, 
        contractAddress: receipt.contractAddress,
        transactionHash: hash,
        name: "Prompt TestToken",
        symbol: "PROMPTTEST",
        decimals: 18,
        totalSupply: "1000000000000000000000000"
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );

  } catch (error) {
    console.error('ERC20 deploy error:', error);
    
    return new Response(
      JSON.stringify({ 
        success: false, 
        error: error.message,
        stack: error.stack
      }),
      { 
        status: 500,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }
      }
    );
  }
});